import tkinter as tk
from deep_translator import GoogleTranslator
from tkinter import font
from PIL import Image, ImageTk, ImageDraw
from gtts import gTTS
import os
from langdetect import detect
import pygame
import time

# Initialize pygame mixer
pygame.mixer.init()

def translate_text():
    input_text = text_to_translate.get(1.0, tk.END).strip()
    dest_language = language_map[dest_lang.get()]
    
    if input_text:
        try:
            # Detect input language
            detected_lang = detect(input_text)

            translator = GoogleTranslator(target=dest_language)
            translated = translator.translate(input_text)
            translated_text.delete(1.0, tk.END)
            translated_text.insert(tk.END, translated)
            add_to_history(f"Input: {input_text}\nTranslated: {translated}")
        except Exception as e:
            translated_text.delete(1.0, tk.END)
            translated_text.insert(tk.END, f"Error: {e}")
    else:
        translated_text.delete(1.0, tk.END)
        translated_text.insert(tk.END, "Please enter some text.")

def blink_heading():
    current_color = heading_label.cget("fg")
    next_color = "#ffffff" if current_color == "#003366" else "#003366"
    heading_label.config(fg=next_color)
    root.after(250, blink_heading)  # Change the interval to adjust the blinking speed

def on_enter(e):
    translate_button.config(bg='#002f6c', fg='#ffffff')

def on_leave(e):
    translate_button.config(bg='#003366', fg='white')

def draw_solid_blue_background():
    width, height = 600, 800
    blue_background = Image.new('RGB', (width, height), color='#003366')
    blue_background.save('blue_bg.jpg')
    return Image.open('blue_bg.jpg')

def add_to_history(entry):
    history_text.config(state=tk.NORMAL)
    history_text.insert(tk.END, entry + "\n\n")
    history_text.config(state=tk.DISABLED)

def clear_text():
    text_to_translate.delete(1.0, tk.END)
    translated_text.delete(1.0, tk.END)

def stop_audio():
    """Ensure any playing audio is stopped and unloaded."""
    if pygame.mixer.music.get_busy():
        pygame.mixer.music.stop()
    pygame.mixer.music.unload()

def speak_text():
    text = translated_text.get(1.0, tk.END).strip()
    if text:
        try:
            # Stop any existing audio playback
            stop_audio()

            # Convert text to speech and save as mp3 file
            tts = gTTS(text=text, lang=language_map[dest_lang.get()])
            save_path = "speech.mp3"

            # If the file exists and is still being used, ensure it is closed
            if os.path.exists(save_path):
                os.remove(save_path)  # Remove the previous file if it exists

            tts.save(save_path)
            
            # Use pygame to play the mp3 file
            pygame.mixer.music.load(save_path)
            pygame.mixer.music.play(loops=0)

        except Exception as e:
            translated_text.delete(1.0, tk.END)
            translated_text.insert(tk.END, f"Error: {e}")

# Language maps
language_map = {
    'English': 'en', 'Spanish': 'es', 'French': 'fr', 'German': 'de',
    'Chinese (Simplified)': 'zh-CN', 'Russian': 'ru', 'Japanese': 'ja',
    'Korean': 'ko', 'Italian': 'it', 'Portuguese': 'pt', 'Hindi': 'hi',
    'Arabic': 'ar', 'Tamil': 'ta', 'Kannada': 'kn', 'Malayalam': 'ml',
    'Gujarati': 'gu', 'Sourashtra': 'saz',
}

root = tk.Tk()
root.title("Advanced Language Translator")
root.geometry("600x800")

# Apply solid blue background
blue_bg = draw_solid_blue_background()
background_image = blue_bg.resize((600, 800), Image.Resampling.LANCZOS)
background_photo = ImageTk.PhotoImage(background_image)
background_label = tk.Label(root, image=background_photo)
background_label.place(relwidth=1, relheight=1)

# Fonts
heading_font = font.Font(family="Comic Sans MS", size=28, weight="bold")
input_font = font.Font(family="Arial", size=14)
text_font = font.Font(family="Arial", size=12)
button_font = font.Font(family="Arial", size=14, weight="bold")
history_font = font.Font(family="Arial", size=10)

heading_label = tk.Label(root, text="Language Translator", font=heading_font, fg='#ffffff', bg='#003366', relief=tk.RAISED, bd=3, padx=10, pady=10)
heading_label.pack(pady=15)
root.iconbitmap(r'C:\pythonss\languages.png')
input_label = tk.Label(root, text="Enter Text:", bg='#003366', fg='#ffffff', font=input_font)
input_label.pack()

text_to_translate = tk.Text(root, height=3, width=40, bd=2, relief=tk.SOLID, bg='#ffffff', fg='#003366', font=text_font)
text_to_translate.pack(pady=10)

# Frame for language selection and clear button
frame = tk.Frame(root, bg='#003366')
frame.pack(pady=5)

select_label = tk.Label(frame, text="Select Destination Language:", bg='#003366', fg='#ffffff', font=input_font)
select_label.pack(side=tk.LEFT, padx=5)

dest_lang = tk.StringVar(root)
dest_lang.set('English')
language_menu = tk.OptionMenu(frame, dest_lang, *language_map.keys())
language_menu.config(bg='#002f6c', fg='#ffffff', font=text_font, bd=2, relief=tk.SOLID)
language_menu.pack(side=tk.LEFT, padx=5)

clear_button = tk.Button(frame, text="Clear", command=clear_text, font=button_font, width=10, bd=3, relief=tk.RAISED, bg='#003366', fg='white')
clear_button.pack(side=tk.LEFT, padx=5)

translate_button = tk.Button(root, text="Translate", command=translate_text, font=button_font, width=20, bd=3, relief=tk.RAISED, bg='#003366', fg='white')
translate_button.pack(pady=10)
translate_button.bind("<Enter>", on_enter)
translate_button.bind("<Leave>", on_leave)

# New Feature Buttons
speak_button = tk.Button(root, text="Speak Translated Text", command=speak_text, font=button_font, width=20, bd=3, relief=tk.RAISED, bg='#003366', fg='white')
speak_button.pack(pady=10)

output_label = tk.Label(root, text="Translated Text:", bg='#003366', fg='#ffffff', font=input_font)
output_label.pack()

# Increased size for the translated text box
translated_text = tk.Text(root, height=5, width=40, bd=2, relief=tk.SOLID, bg='#ffffff', fg='#003366', font=text_font)
translated_text.pack(pady=10)

history_label = tk.Label(root, text="Translation History:", bg='#003366', fg='#ffffff', font=input_font)
history_label.pack(pady=5)

# Adding the history_text widget
history_text = tk.Text(root, height=5, width=60, bd=2, relief=tk.SOLID, bg='#ffffff', fg='#003366', font=history_font, state=tk.DISABLED)
history_text.pack(pady=10)

# Start the heading blinking effect
blink_heading()

root.mainloop()
